import java.util.Scanner;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.io.UnsupportedEncodingException;
import java.lang.UnsupportedOperationException;
import java.util.ArrayList;
import java.util.List;
import java.util.Collection;
import java.util.Collections;

//方法、操作选择，以及输入输出，尝试写了循环嵌套但失败了

public class Caesar {
	public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
        System.out.println("请选择方法：1.凯撒，2.MD5，3.退出");
        int methodChoice = scanner.nextInt();
        switch (methodChoice) {
        case 1:
            System.out.println("请选择操作：1.凯撒加密，2.凯撒解密");
		    int workChoice1 = scanner.nextInt();
            String text;
            int key;
            switch(workChoice1) {
	        case 1:
                System.out.println("请输入明文：");
                scanner.nextLine();
        	    text = scanner.nextLine();
        	    System.out.println("请输入密钥：");
                key = scanner.nextInt();
                Encryption encrypt = new CaesarEncryption();
                encrypt.encrypt(text, key);
                break;
        	case 2:
                System.out.println("请输入密文：");
                scanner.nextLine();
                text = scanner.nextLine();
                System.out.println("请输入密钥：");
                key = scanner.nextInt();
                Encryption decrypt = new CaesarEncryption();
                decrypt.decrypt(text, key);
                break;
            default:
                System.out.println("操作错误");
                break;  
                }
            break;
        case 2:
            System.out.println("请选择操作：1.MD5加密，2.MD5解密");
            int workChoice2 = scanner.nextInt();
            switch(workChoice2) {
            case 1:
                System.out.print("请输入加密内容：");
                scanner.nextLine();
                text = scanner.nextLine();
                key = 0;
                MD5Utils md5encrypt = new MD5Utils();
                md5encrypt.encrypt(text, key);
                break;
            case 2:
                System.out.println("请输入解密内容");
                scanner.nextLine();
                text = scanner.nextLine();
                key = 0;
                MD5Utils md5decrypt = new MD5Utils();
                md5decrypt.decrypt(text, key);
                break;
            default:
                System.out.println("操作错误");
                break;
            }
            break;
        case 3:
            System.out.println("感谢使用本程序！");
            return;
        }   
    }
    } 
}

//接口类

interface Encryption {
    void encrypt(String text, int key);
    void decrypt(String text, int key);
}

//根据ASCII码位移加密

class CaesarEncryption implements Encryption {
	private String text;
    private int key;
        
    public void encrypt(String text, int key) {
        this.text = text;
        this.key = key;
        String ciphertext = "";
        for(int i = 0; i < text.length(); i++) {
            char character = text.charAt(i);
            if(character >= 'a' && character <= 'z') {
                character += key % 26;
                if(character < 'a') {
                    character += 26;
                } else if (character > 'z') {
                    character -= 26;
                }
            } else if (character >= 'A' && character <= 'Z') {
                character += key % 26;
                if(character < 'A') {
                    character += 26;
                } else if (character > 'Z') {
                    character -= 26;
                }
            } else if (character >= '0' && character <= '9') {
                character += key % 10 ;
                if(character < '0') {
                    character += 10;
                } else if (character > '9') {
                    character -= 10;
                }
            }
            ciphertext += character;
        }
        System.out.println("密文为：" + ciphertext);
    }

    public String getText() {
        return this.text;
    } 
    public void setText(String text) {
        this.text = text;
    }
    public int getKey() {
        return this.key;
    }
    public void setKey(int key) {
        this.key = key;
    }

//根据ASCII码位移解密

    public void decrypt(String text, int key) {
        this.text = text;
        this.key = key;
        String plaintext = "";
        for(int i = 0; i < text.length(); i++) {
            char character = text.charAt(i);
            if(character >= 'a' && character <= 'z') {
                character -= key % 26;
                if(character < 'a') {
                    character += 26;
                } else if (character > 'z') {
                    character -= 26;
                }
            } else if (character >= 'A' && character <= 'Z') {
                character -= key % 26;
                if(character < 'A') {
                    character += 26;
                } else if (character > 'Z') {
                    character -= 26;
                }
            } else if (character >= '0' && character <= '9') {
                character -= key % 10 ;
                if(character < '0') {
                    character += 10;
                } else if (character > '9') {
                    character -= 10;
                }
            }
            plaintext += character;
        }
        System.out.println("明文为：" + plaintext);
    }  
    //写重复了，本来是想写嵌套类的，但不会用接口调用出来
    /*public String getText() {
        return this.text;
    }
    public void setText(String text) {
        this.text = text;
    }
    public int getKey() {
        return this.key;
    }
    public void setKey(int key) {
        this.key = key;
    }*/
      
}

//以下MD5加密为网上摘抄修改

class MD5Utils implements Encryption {
    private static char hexDigits[] = {//用来将字节转换成 16 进制表示的字符
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    public void encrypt(String text, int key) {
        String result = "";
        if(text != null) {
        try {
//返回实现指定摘要算法的 MessageDigest 对象
            MessageDigest md = MessageDigest.getInstance("MD5");
//使用utf-8编码将originstr字符串编码并保存到source字节数组
            byte[] source = text.getBytes("utf-8");
//使用指定的 byte 数组更新摘要
            md.update(source);
//通过执行诸如填充之类的最终操作完成哈希计算，结果是一个128位的长整数
            byte[] tmp = md.digest();
//用16进制数表示需要32位

            char[] str = new char[32];

            for(int i=0,j=0; i < 16; i++){

                    //j表示转换结果中对应的字符位置

                    //从第一个字节开始，对 MD5 的每一个字节

                    //转换成 16 进制字符

                byte b = tmp[i];

                    //取字节中高 4 位的数字转换

                    //无符号右移运算符>>> ，它总是在左边补0

                    //0x代表它后面的是十六进制的数字. f转换成十进制就是15

                str[j++] = hexDigits[b>>>4 & 0xf];

                    // 取字节中低 4 位的数字转换

                str[j++] = hexDigits[b&0xf];

                }

            result = new String(str);//结果转换成字符串用于返回
            } catch (NoSuchAlgorithmException e) {

                //当请求特定的加密算法而它在该环境中不可用时抛出此异常

                e.printStackTrace();

            } catch (UnsupportedEncodingException e) {
                //不支持字符编码异常
                e.printStackTrace();
            }

        }
        System.out.println("MD5加密后：" + result);
    }

//实在不知道如何写，直接写了个能出现该异常的代码

    public void decrypt(String text, int key) {
        try {
        List<String> list = new ArrayList<>();
        list.add("1");
        Collection<String> listC = Collections.unmodifiableCollection(list);
        listC.add("2"); // UnsupportedOperationException
        } catch (UnsupportedOperationException e) {
            e.printStackTrace();
            System.out.println("MD5 算法无法解密");
        }
    }
}